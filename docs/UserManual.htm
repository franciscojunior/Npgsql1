<html><head>

<title>Npgsql: User's Manual</title>

<meta http-equiv="content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="content-Style-Type" content="text/css">
<meta http-equiv="expires" content="">
<meta name="category" content="IT/Database/PostgreSQL/Npgsql/Docs/Internal">
<meta name="filename" content="state-machine.htm">
<meta name="date" content="2002-06-29">
<meta name="author" content="Francisco Jr.">
<meta name="robots" content="nofollow">
<meta name="keywords" content="IT; Database; PostgreSQL; Npgsql; Communication; State Machine; Documentation;">
<meta name="description" content="This document describes the User's Manual of Npgsql.">

<link rel="stylesheet" href="global.css">
<script language="JavaScript" src="global.js"></script>

<!-- Table Layout Stylesheet -->

<style>
table.std {
    border-bottom: 2 solid silver;
    border-right: 2 solid silver;
    line-height: 140%;
    }
tr.tableheader {
    background-color: PowderBlue;
    color: darkblue;
    text-align: center;
    font-weight: bold;
    font-size: larger;
    height: 40;
    }
tr.stateheader {
    background-color: AliceBlue;
    color: darkblue;
    text-align: center;
    font-weight: bold;
    padding-top: 8;
    padding-bottom: 8;
    height: 40;
    }
tr.columnheader {
    text-align: center;
    font-weight: normal;
    height-
    }
tr.std {
    text-align: left;
    vertical-align: top;
    }
td.std {
    border-top: 2 solid silver;
    border-left: 2 solid silver;
    padding-right: 5;
    padding-left: 5;
    padding-top: 5;
    padding-bottom: 5;
    }

p.headnotes {
    font-size:smaller;
    margin-top: 0;
    margin-bottom: 0;
    }
</style>

</head><body>

<h1 align="center">Npgsql: User's Manual</h1>
<center> Copyright &copy; <a href="http://gborg.postgresql.org/project/npgsql/cvs/co.php/Npgsql/docs/thenpgsqldevelopmentteam.htm">The Npgsql Development Team </a></center>
<hr />

<p />

<p class="headnotes">Last update: 2003-05-31 12:40 by fxjr</p>
<p class="headnotes">Category: External documentation</p>
<p class="headnotes">Intended Audience: Npgsql Users</p>


<h2> 1. What is Npgsql? </h2>

<p> Npgsql is a .Net Data Provider for <a href="http://www.postgresql.org">Postgresql Database Server</a>. </p>

<p> It allows a .Net client application (Console, WinForms, ASP.NET, Web Services...) to use a PostgreSQL server to send and receive data. It is developed using the
guidelines specified in the .Net docs.</p>

<h2> 2. Npgsql Usage </h2>

<p> This section explains Npgsql usage in a .Net Application. If you are used to developing Data Access applications using the
Sql Server, OleDB or ODBC.NET providers, using Npgsql is very similar.</p>
<p> Note: Npgsql is still under development. Only features currently supported will be demonstrated. As Npgsql matures, more functionality will be available to be used. </p>

<h3> Adding required namespaces to your source file </h3>

<p> First, to use Npgsql objects more easily, you have to tell the compiler to use the Npgsql namespace. It will also be needed to use the
System.Data namespace as a lot of classes used for data manipulation reside in it. To do that, in C#, you use the using directive: </p>

<pre class="CodeBox">
using System.Data;
using Npgsql;
</pre>

<h3> Establishing a connection </h3>
<p>To establish a connection to a server located at ip 127.0.0.1, port 5432, as the user joe, with the password secret, using the database joedata, you use the NpgsqlConnection as:</p>
<pre class="CodeBox">
using System;
using System.Data;
using Npgsql;

public class NpgsqlUserManual
{
  public static void Main(String[] args)
  {
    NpgsqlConnection conn = new NpgsqlConnection("Server=127.0.0.1;Port=5432;User Id=joe;Password=secret;Database=joedata;");
    conn.Open();
    conn.Close();
  }
}
</pre>

<h3> Using NpgsqlCommand to add a row in a table </h3>
<p>The previous example doesn't do anything useful. It only connects to the database and disconnects. If there is an error, a NpgsqlException is thrown.
Now, suppose there is a table called table1 with two fields a and b both of type int. If you want to add the tuple (1, 1) in this table you could send the 
insert statement as follows:</p>

<pre class="CodeBox">
using System;
using System.Data;
using Npgsql;

public static class NpgsqlUserManual
{
  public static void Main(String[] args)
  {
    NpgsqlConnection conn = new NpgsqlConnection("Server=127.0.0.1;Port=5432;User Id=joe;Password=secret;Database=joedata;");
    conn.Open();
    
    NpgsqlCommand command = new NpgsqlCommand("insert into table1 values(1, 1)", conn);
    Int32 rowsaffected;
    
    try
    {
      rowsaffected = command.ExecuteNonQuery();
    }
    
    Console.WriteLine("It was added {0} lines in table table1", rowsaffected);
    
    finally
    {
      conn.Close();
    }
  }
}
</pre>

<h3> Getting a single result using NpgsqlCommand.ExecuteScalar() method </h3>
<p> To execute statements which return just one value you use the ExecuteScalar() method of the Command object:</p>
<pre class="CodeBox">
using System;
using System.Data;
using Npgsql;

public static class NpgsqlUserManual
{
  public static void Main(String[] args)
  {
    NpgsqlConnection conn = new NpgsqlConnection("Server=127.0.0.1;Port=5432;User Id=joe;Password=secret;Database=joedata;");
    conn.Open();
    
    NpgsqlCommand command = new NpgsqlCommand("select version()", conn);
    String serverversion;
    
    try
    {
      serverversion = (String)command.ExecuteScalar();
    }
    
    Console.WriteLine("PostgreSQL server version: {0}", serverversion);
    
    finally
    {
      conn.Close();
    }
  }
}
</pre>

Other queries could also be used, for example "select count(*) from table1". Also, queries that don't return single values
could be used, but only the first column of the first row would be returned.

<h3> Getting full results from a query using NpgsqlCommand.ExecuteReader() method and NpgsqlDataReader object </h3>
<p> To execute statements which return full results from a query you use the ExecuteReader() method of the NpgsqlCommand object:</p>
<pre class="CodeBox">
using System;
using System.Data;
using Npgsql;

public static class NpgsqlUserManual
{
  public static void Main(String[] args)
  {
    NpgsqlConnection conn = new NpgsqlConnection("Server=127.0.0.1;Port=5432;User Id=joe;Password=secret;Database=joedata;");
    conn.Open();
    
    NpgsqlCommand command = new NpgsqlCommand("select * from tablea", conn);

    
    try
    {
	NpgsqlDataReader dr = command.ExecuteReader();
	while(dr.Read())
	{
  		for (i = 0; i < dr.FieldCount; i++)
  		{
  			Console.Write("{0} \t", dr[i]);
  		}
  		Console.WriteLine();
	}

    }
    
    finally
    {
      conn.Close();
    }
  }
}
</pre>

This code assumes there is a table called tablea in the database.


<h3> Using parameters in a query </h3>
<p> You can also send a parameterized query to the server using NpgsqlParamenter and NpgsqlParamenterCollection objects.
A parameter is a string prefixed by : in the query string. The example below uses a parameter called column1.</p>
<pre class="CodeBox">
using System;
using System.Data;
using Npgsql;

public static class NpgsqlUserManual
{
  public static void Main(String[] args)
  {
    NpgsqlConnection conn = new NpgsqlConnection("Server=127.0.0.1;Port=5432;User Id=joe;Password=secret;Database=joedata;");
    conn.Open();
    
    // Declare the parameter in the query string
    NpgsqlCommand command = new NpgsqlCommand("select * from tablea where column1 = :column1", conn);
    
    // Now add the parameter to the parameter collection of the command specifying its type.
    command.Parameters.Add(new NpgsqlParameter("column1", DbType.Int32));

    // Now, add a value to it and later execute the command as usual.
    command.Parameters[0].Value = 4;

    
    try
    {
	NpgsqlDataReader dr = command.ExecuteReader();
	while(dr.Read())
	{
  		for (i = 0; i < dr.FieldCount; i++)
  		{
  			Console.Write("{0} \t", dr[i]);
  		}
  		Console.WriteLine();
	}

    }
    
    finally
    {
      conn.Close();
    }
  }
}
</pre>

This code assumes a table called tablea with at least a column named column1 of type int4.

<h3> Using prepared statements</h3>
<p> The previous example can also be used to send prepared statements request to server. This way, the query plan is
create just once and reused by subsequent calls. Note that this feature is only available in server 7.3+ versions. If
you call it in a server which doesn't support it, Npgsql will silently ignore it. This is good as you can create code which
calls it but it will only have effect when connected to the supported servers.
To do it, you just call the Prepare() method of the command.</p>
<pre class="CodeBox">
using System;
using System.Data;
using Npgsql;

public static class NpgsqlUserManual
{
  public static void Main(String[] args)
  {
    NpgsqlConnection conn = new NpgsqlConnection("Server=127.0.0.1;Port=5432;User Id=joe;Password=secret;Database=joedata;");
    conn.Open();
    
    // Declare the parameter in the query string
    NpgsqlCommand command = new NpgsqlCommand("select * from tablea where column1 = :column1", conn);
    
    // Now add the parameter to the parameter collection of the command specifying its type.
    command.Parameters.Add(new NpgsqlParameter("column1", DbType.Int32);

    // Now, prepare the statement.
    command.Prepare();

    // Now, add a value to it and later execute the command as usual.
    command.Parameters[0].Value = 4;

    
    try
    {
	NpgsqlDataReader dr = command.ExecuteReader();
	while(dr.Read())
	{
  		for (i = 0; i < dr.FieldCount; i++)
  		{
  			Console.Write("{0} \t", dr[i]);
  		}
  		Console.WriteLine();
	}

    }
    
    finally
    {
      conn.Close();
    }
  }
}
</pre>

This code assumes a table called tablea with at least a column named column1 of type int4.


<h3> Function calling</h3>
<p> To call a function, you just set the CommandType property of the NpgsqlCommand object to CommandType.StoredProcedure
and pass the name of the function you want to call as the query string.</p>
<pre class="CodeBox">
using System;
using System.Data;
using Npgsql;


// This example uses a function called funcC() with the following definition:
// create function funcC() returns int8 as '
// select count(*) from tablea;
// ' language 'sql';

// Note that the return type of select count(*) changed from int4 to int8 in 7.3+ versions. To use this function
// in a 7.2 server, change the return type from int8 to int4.

public static class NpgsqlUserManual
{
  public static void Main(String[] args)
  {
    NpgsqlConnection conn = new NpgsqlConnection("Server=127.0.0.1;Port=5432;User Id=joe;Password=secret;Database=joedata;");
    conn.Open();
    
      
    try
    {
        NpgsqlCommand command = new NpgsqlCommand("funcC()", _conn);
        command.CommandType = CommandType.StoredProcedure;
  					
        Object result = command.ExecuteScalar();
  		
        Console.WriteLine(result);


    }
    
    finally
    {
      conn.Close();
    }
  }
}
</pre>

<p>In the same way as clear queries, you can specify parameters to function calls.</p>

<pre class="CodeBox">
using System;
using System.Data;
using Npgsql;


// This example uses a function called funcC() with the following definition:
// create function funcC(int4) returns int8 as '
// select count(*) from tablea where field_int4 = $1;
// ' language 'sql';

public static class NpgsqlUserManual
{
  public static void Main(String[] args)
  {
    NpgsqlConnection conn = new NpgsqlConnection("Server=127.0.0.1;Port=5432;User Id=joe;Password=secret;Database=joedata;");
    conn.Open();
    
      
    try
    {
        NpgsqlCommand command = new NpgsqlCommand("funcC(:a)", _conn);
        command.CommandType = CommandType.StoredProcedure;
        
        command.Parameters.Add(new NpgsqlParameter("a", DbType.Int32));
  					
        command.Parameters[0].Value = 4;
		
        Object result = command.ExecuteScalar();
  		
        Console.WriteLine(result);


    }
    
    finally
    {
      conn.Close();
    }
  }
}
</pre>

<p> This code assumes a table called tablea with at least a field called field_int4 of type int4.


<h3> Working with Datasets </h3>

<p> You can use Npgsql when working with Datasets. This allows you to do changes in the dataset and have them propagated back to 
backend. The below example shows how to add a row using the Dataset:</p>
<pre class="CodeBox">

// This method expects the following table in the backend:
//
//	create table tableb(field_int2 int2, field_timestamp timestamp, field_numeric numeric);
//
//	
void AddWithDataSet(NpgsqlConnection conn)
{	
	conn.Open();
			
	DataSet ds = new DataSet();

	NpgsqlDataAdapter da = new NpgsqlDataAdapter("select * from tableb", conn);
	
	da.InsertCommand = new NpgsqlCommand("insert into tableb(field_int2, field_timestamp, field_numeric) " + 
							" values (:a, :b, :c)", conn);
			
	da.InsertCommand.Parameters.Add(new NpgsqlParameter("a", DbType.Int16));
	
	da.InsertCommand.Parameters.Add(new NpgsqlParameter("b", DbType.DateTime));
			
	da.InsertCommand.Parameters.Add(new NpgsqlParameter("c", DbType.Decimal));
	
	da.InsertCommand.Parameters[0].Direction = ParameterDirection.Input;
	da.InsertCommand.Parameters[1].Direction = ParameterDirection.Input;
	da.InsertCommand.Parameters[2].Direction = ParameterDirection.Input;
	
	da.InsertCommand.Parameters[0].SourceColumn = "field_int2";
	da.InsertCommand.Parameters[1].SourceColumn = "field_timestamp";
	da.InsertCommand.Parameters[2].SourceColumn = "field_numeric";
	
	da.Fill(ds);
	
	DataTable dt = ds.Tables[0];
	
	DataRow dr = dt.NewRow();
	dr["field_int2"] = 4;
	dr["field_timestamp"] = new DateTime(2003, 03, 03, 14, 0, 0);
	dr["field_numeric"] = 7.3M;
			
	dt.Rows.Add(dr);
			
	DataSet ds2 = ds.GetChanges();
	
	da.Update(ds2);
	
	ds.Merge(ds2);
	ds.AcceptChanges();
}
		
</pre>

<h3> Working with strong typed datasets </h3>

<p> This example will show how to use a strong typed dataset generated with xsd. To do so, we need a .xsd file specifing the 
schema to the strong dataset. You can generate this file by hand, or you can use xsd to generate it for you. To have xsd generate
the .xsd for you, you have to suppy it with a .xml file which it will infer the .xsd from. We can use a .xml file generated with 
a DataAdapter.WriteXml() method:</p>
<pre class="CodeBox">
public void GenerateXmlFromDataSet(NpgsqlConnection conn)
{
	conn.Open();
			
						
	NpgsqlDataAdapter da = new NpgsqlDataAdapter("select * from tablea", conn);
		
	DataSet ds = new DataSet();
			
	da.Fill(ds);
			
	ds.WriteXml("StrongDataSetFeed.xml");
}
</pre>


<p> This will give us a file which looks similar to this:</p>

<pre class="CodeBox">
&lt;?xml version="1.0" standalone="yes"?&gt;
&lt;NewDataSet&gt;
  &lt;Table&gt;
    &lt;field_serial&gt;1&lt;/field_serial&gt;
    &lt;field_text&gt;Random text&lt;/field_text&gt;
  &lt;/Table&gt;
  &lt;Table&gt;
    &lt;field_serial&gt;2&lt;/field_serial&gt;
    &lt;field_int4&gt;4&lt;/field_int4&gt;
  &lt;/Table&gt;
  &lt;Table&gt;
    &lt;field_serial&gt;3&lt;/field_serial&gt;
    &lt;field_int8&gt;8&lt;/field_int8&gt;
  &lt;/Table&gt;
  &lt;Table&gt;
    &lt;field_serial&gt;4&lt;/field_serial&gt;
    &lt;field_bool&gt;true&lt;/field_bool&gt;
  &lt;/Table&gt;
  &lt;Table&gt;
    &lt;field_serial&gt;5&lt;/field_serial&gt;
    &lt;field_text&gt;Text with ' single quote&lt;/field_text&gt;
  &lt;/Table&gt;
&lt;/NewDataSet&gt;

</pre>

<p> This file will be used with xsd to generate the .xsd file with the following command:</p>
<pre class="CodeBox">
xsd StrongDataSetFeed.xml
</pre>

<p> xsd will produce an xml schema which will have all types specified as string, we just change the xsd to use the 
correct types and have a .xsd file similar to this:</p>
<pre class="CodeBox">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;
  &lt;xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:Locale="pt-BR"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:choice maxOccurs="unbounded"&gt;
        &lt;xs:element name="Table"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:element name="field_serial" type="xs:int" minOccurs="0" /&gt;
              &lt;xs:element name="field_text" type="xs:string" minOccurs="0" /&gt;
              &lt;xs:element name="field_int4" type="xs:int" minOccurs="0" /&gt;
              &lt;xs:element name="field_int8" type="xs:long" minOccurs="0" /&gt;
              &lt;xs:element name="field_bool" type="xs:boolean" minOccurs="0" /&gt;
            &lt;/xs:sequence&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
      &lt;/xs:choice&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
&lt;/xs:schema&gt;

</pre>


<p> With this file we issue the following command to have xsd generate the strong dataset:</p>

<pre class="CodeBox">
xsd StrongDataSetFeed.xsd /dataset
</pre>

<p>Which will generate a file we can compile to get an assembly with the strong dataset. To use it, we do the following:</p>

<pre class="CodeBox">
using System;
using Npgsql;


public class t
{
	public static void Main(String[] args)
	{
		NpgsqlConnection conn = new NpgsqlConnection("Server=127.0.0.1;Port=5432;User Id=joe;Password=secret;Database=joedata;");

		conn.Open();
		
		NpgsqlDataAdapter da = new NpgsqlDataAdapter("Select * from tablea", conn);
	

		NewDataSet n = new NewDataSet();

		da.Fill(n);

		foreach (NewDataSet._TableRow tr in n._Table)
		{
			Console.WriteLine(tr.field_serial);
		}
	}
}
</pre>

<h3>Working with binary data and bytea datatype</h3>

<p> This sample takes a filename as argument, inserts its contents to a table called tableByteA which contains a field called field_bytea of type bytea and a field called field_serial of type serial. Later gets its contents and write a new file with the sufix database in its end.</p>
<p> table schema: 
    create table tableBytea (field_serial serial, field_bytea bytea)
</p>


<pre class="CodeBox">

using System;
using System.Data;
using Npgsql;
using System.IO;


public class t
{
	public static void Main(String[] args)
	{
		//NpgsqlEventLog.Level = LogLevel.Debug;
		//NpgsqlEventLog.LogName = "NpgsqlTests.LogFile";
		NpgsqlConnection conn = new NpgsqlConnection("server=localhost;user id=npgsql_tests;password=npgsql_tests");
		conn.Open();

		FileStream fs = new FileStream(args[0], FileMode.Open, FileAccess.Read);

		BinaryReader br = new BinaryReader(new BufferedStream(fs));

		Byte[] bytes = br.ReadBytes((Int32)fs.Length);
		
		Console.WriteLine(fs.Length);

		br.Close();
		fs.Close();
				
		NpgsqlCommand command = new NpgsqlCommand("insert into tableBytea(field_bytea) values(:bytesData)", conn);
		
		NpgsqlParameter param = new NpgsqlParameter(":bytesData", DbType.Binary);

		param.Value = bytes;
		
		command.Parameters.Add(param);
		command.ExecuteNonQuery();
		command = new NpgsqlCommand("select field_bytea from tableBytea where field_serial = (select max(select field_serial) from tableBytea);", conn);
		

		Byte[] result = (Byte[])command.ExecuteScalar();
		fs = new FileStream(args[0] + "banco", FileMode.Create, FileAccess.Write);

		
		BinaryWriter bw = new BinaryWriter(new BufferedStream(fs));

		bw.Write(result);

		bw.Flush();

		fs.Close();
		bw.Close();		



		conn.Close();

	}
}
</pre>


<h3> 2.1 Npgsql.dll file location </h3>

<p> In order for the .Net Runtime to locate the Npgsql.dll library, this file must be put in the same directory the application is, unless you specify another 
directory as a path to private components through a configuration file (using the probing element). Please, see the .Net docs for information
on how the runtime probes (locates) assemblies to be loaded. There is also a section called "Path to Private Components" </p>
<p> In ASP.NET and Web Services .Net Applications, there must be a directory called "bin" below the ASP.NET root application directory.
So, for example the application directory is called "ASPNETApplication", Npgsql.dll must be placed in the "ASPNETApplication\bin" directory.
If it's not, you will get a lot of compiling errors when trying to use Npgsql.</p>
<p> You can also put the Npgsql assembly in the Global Cache Assembly. Since 0.4 version, Npgsql is strongly signed which means you can
use gacutil to install it. Issue the following command to do it:</p>
<pre class="CodeBox">
gacutil -i Npgsql.dll
</pre>

<p> Please, refer to "Installing an Assembly in the Global Cache Assembly" section of MSDN docs for more help.


<h3> 2.2 Using Npgsql Logging support </h3>

<p> Sometimes it is necessary to trace Npgsql's behaviour to track errors. Npgsql can log messages to a specified file or to the console or both.

<p> There are three levels of logging: <br/>
<ul>
  <li> None </li>
  <li> Normal </li>
  <li> Debug </li>
</ul>
</p>

<p> The following NpgsqlEventLog static properties may also be used:
<ul>
  <li> Level - Can be one of the LogLevel enum values: None, Normal, Debug. </li>
  <li> LogName - Full path of the file where to log into. </li>
  <li> EchoMessages - Log to the console.</li>
</ul>
</p>

<p> The example below shows how to log to the console and a file using the level Debug: </p>

<pre class="CodeBox">
using System.Data;
using Npgsql;

public static class NpgsqlUserManual
{
  public static void Main(String[] args)
  {
    // Enable logging.
    NpgsqlEventLog.Level = LogLevel.Debug;
    NpgsqlEventLog.LogName = "NpgsqlTests.LogFile";
    NpgsqlEventLog.EchoMessages = true;
	  
    NpgsqlConnection conn = new NpgsqlConnection("Server=127.0.0.1;Port=5432;User Id=joe;Password=secret;Database=joedata;");
    conn.Open();
    conn.Close();
  }
}
</pre>

<p> Running this code gives the following output: </p>
<pre class="CodeBox">
Set NpgsqlEventLog.EchoMessages = True
Entering NpgsqlConnection.NpgsqlConnection()
Entering NpgsqlConnection.ParseConnectionString()
Connection string option: DATABASE = joedata
Connection string option: SERVER = 127.0.0.1
Connection string option: USER ID = joe
Connection string option: PASSWORD = secret
Entering NpgsqlConnection.Open()
Connected to: 127.0.0.1:5432
Entering NpgsqlConnection.WritestartupPacket()
Entering NpgsqlStartupPacket.NpgsqlStartupPacket()
Entering NpgsqlStartupPacket.WriteToStream()
Entering PGUtil.WriteLimString()
Entering PGUtil.WriteLimString()
Entering PGUtil.WriteLimString()
Entering PGUtil.WriteLimString()
Entering PGUtil.WriteLimString()
Entering NpgsqlConnection.HandleStartupPacketResponse()
AuthenticationRequest message from Server
Server requested cleartext password authentication.
Entering NpgsqlPasswordPacket.NpgsqlPasswordPacket()
Entering NpgsqlPasswordPacket.WriteToStream()
Entering PGUtil.WriteString()
Listening for next message
AuthenticationRequest message from Server
Listening for next message
BackendKeyData message from Server
Entering NpgsqlBackEndKeyData.ReadFromStream()
Got ProcessID. Value: 3116
Got SecretKey. Value: -132883070
Listening for next message
ReadyForQuery message from Server
Listening for next message
Connection completed
Entering NpgsqlConnection.Close()
</pre>

<p>I used the Debug level to show that a lot of information can be obtained. Of course, using the Normal level would be less verbose.
Also, this same information was added to the file NpgsqlTests.LogFile.</p>

<h3> 2.3 Npgsql design time support </h3>

<p>
Npgsql 0.6 and higher provide initial design time support.
This means that you can drag and drop a NpgsqlConnection in the Form-Designer of Visual Studio .NET as you are used to with SqlConnections or OleDbConnections.<br>
There is also a Dialog to edit and validate the ConnectionString
</p>
<p>To do so you must:
<ol>
	<li>Install Npgsql.dll into the gac</li>
	<li>Add a new Registry-Key below 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\AssemblyFolders' and set 
	it's default value to the path of your Npgsql.dll</li>
	<li>Open Visual Studio .NET</li>
	<li>Right-click the "Data"-Tab of the Toolbox</li>
	<li>Click add/remove element</li>
	<li>On the .Net-Tab select NpgsqlConnection</li>
</ol>
As result you will have an icon named NpgsqlConnection in the Data-Tab of the Toolbox
</p>
</body>
</html>
