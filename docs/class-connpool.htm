<html><head>

<title>Npgsql: Connector Pool Class</title>

<meta http-equiv="content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="content-Style-Type" content="text/css">
<meta http-equiv="expires" content="">
<meta name="category" content="IT/Database/PostgreSQL/Npgsql/Docs/Internal">
<meta name="filename" content="class-connpool.htm">
<meta name="date" content="2002-06-17">
<meta name="author" content="Ulrich Sprick">
<meta name="robots" content="nofollow">
<meta name="keywords" content="IT; Database; PostgreSQL; Npgsql; Communication; Documentation; Class; Connector Pool;">
<meta name="description" content="This document describes the connector pool class">

<link rel="stylesheet" href="global.css">
<script language="JavaScript" src="global.js"></script>

<!-- Table Layout Stylesheet -->

</style>

</head><body>

<h1 align=center>Npgsql: Connector Class</h1><hr>

<table width=100%>
<tr>
<td width=33% align=left>&larr; <a href="">???</a></td>
<td width=33% align=center><a href="index.htm">Up</a></td>
<td width=33% align=right><a href="">???</a> &rarr;</td>
</tr>
</table><hr>

<p> </p>

<p class=headnotes>Last update: 2002-06-18 01:48:00 by usp</p>
<p class=headnotes>Category: Internal documentation</p>
<p class=headnotes>Intended Audience: Npgsql Developers</p>

<p>This document describes the Npgsql Connector Pool class.</p>

<p>The connector pool class implements the connector pooling logic. We use the term <i>connector</i> instead of <i>connection</i>, because the <A href="connector-class.htm">connector class</A> pulls out logic of dealing with physical connection like opening and closing out of the connection object, in order to hide the connection pooling issues from the application programmer completely. The only things that deal with the connection pooling in the connection object are the properties <i>Pooled</i> and <i>shared</i>.</p>

<p>The connector pool manager is a unique, static instance of the Npgsql.ConnectionPool class. It controls requesting and release of connector objects and maintains internal lists of shared and pooled connectors. The concepts of pooled and shared connectors are describted in the following paragraphs.</p>


<h3>Pooled Connections</h3>

<p>The connection pooling is enabled by default. If a connection object is created, it requests a connector object from the global connection pool manager. This connector object will have its <i>Pooled</i> property set.</p>

<p>The pooled property comes in effect when the connection is closed by the application: The physical connection to the database is not really closed; instead it is held open by the connector object. The connection passes its connector object back to the connector pool manager, where it is inserted into the <i>pooled connectors list</i>.</p>

<p>If the connection is reopened later or if the application needs a new connection with the same connection string, the connector pool manager returns the readily opened connector to the connection object. The fact that the connection doesn't have to be opened speeds up the interaction with the database backend greatly, because establishing a new connection is quite a costly and time consuming operation (a new backend process is forked on the server by the Postmaster).</p>

<p>All resusable connector objects are held in an internal pooled connetor list inside the connector pool manager.</p>


<h3>Shared Connectors</h3>

<p>In order to reduce the number of connections needed by an application and save resources on the server, connectors can be shared among multiple connection objects.</p>

<p>If a connection is opend with its <i>Shared</i> property set, the connector pool manager searches its internal <i>shared connectors list</i> first. If it finds a connection already open and in use, it returns a reference to that connector to the connection object. If there is no such shared connection, then the connector pool manager looks up ist unused, pooled connectors list. If it finds a suitable unused connection, it is moved into the shared connectors list and then returned to the requesting connection object. If there is no such connector, a new one is created instead and returned.</p>

<p>Due to the fact that multiple connection objects share a single physical connection through the means of a single connector object, there may arise some courious behaviour regarding transaction processing.</p>

<p>Transactions are controlled and coordinated by a physical connection (sometimes referred to as <i>session</i>. If an application uses transactions in various places, these trancations may interact in an unexpected way, if not carefully designed. If an application designer is not shure, he should use an exclusive connection instead of a shared one. This is the default behaviour. </p>

<h3>Connection Pooling Class Hierarchy</h3>

<p>The class hierarchy is show in figure-2 below.</p>

<img src="connection-pooling-2.png">

<p>The connector pool object maintains two list of connector objects: The shared connectors list and the pooled unused connectors list.</p>


<h3>See also</h3>

<p>Further insight into a connector object and its interaction with the connector pool manager gives the <a href="class-connector.htm">Connector</a> class documentation.</p>

<h3>The Code</h3>

<p>... can be inspected <a href="javascript:popUp('../src/npgsql/NpgsqlConnectorPoolMgr.cs')">here</a></p>

</body>
</html>
