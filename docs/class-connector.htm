<html><head>

<title>Npgsql: Connector Class</title>

<meta http-equiv="content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="content-Style-Type" content="text/css">
<meta http-equiv="expires" content="">
<meta name="category" content="IT/Database/PostgreSQL/Npgsql/Docs/Internal">
<meta name="filename" content="class-connector.htm">
<meta name="date" content="2002-06-17">
<meta name="author" content="Ulrich Sprick">
<meta name="robots" content="nofollow">
<meta name="keywords" content="IT; Database; PostgreSQL; Npgsql; Communication; Documentation; Class; Connector;">
<meta name="description" content="This document describes the connector class">

<link rel="stylesheet" href="global.css">
<script language="JavaScript" src="global.js"></script>


</head><body>

<h1 align=center>Npgsql: Connector Class</h1><hr>

<table width=100%>
<tr>
<td width=33% align=left>&larr; <a href="">???</a></td>
<td width=33% align=center><a href="index.htm">Up</a></td>
<td width=33% align=right><a href="">???</a> &rarr;</td>
</tr>
</table><hr>

<p> </p>

<p class=headnotes>Last update: 2002-06-18 01:48:00 by usp</p>
<p class=headnotes>Category: Internal documentation</p>
<p class=headnotes>Intended Audience: Npgsql Developers</p>

<p>This document describes the Npgsql Connector class.</p>

<p>The connector class is used internally in Npgsql to provide access to the physical connection to the PostgreSQL server. Its main purpose is to hide the connection pool issues from the connection class. </p>

<h2>Interface</h2>

<h3>Pproperties</h3>
<dl>
<dt>Pooled</dt>
<dd>Controls the pooling of the physical connection: If false, then the physical connection is closed and the associcated connector destroyed in the Release() method. If true, the pyhical connection is held open and the connector is pooled by the connector pool manager.</dd>

<dt>Shared</dt>
<dd>Enables the physical connector to be shared by multiple connection objects.</dd>

<dt>ConnectString</dt>
<dd>The connection string is used to open a physical connection to the database server. The connector pool manager looks at the connection string to determine if a connector is suitable to be returned to the requesting connection object.</dd>
</dl>


<h3>Methods</h3>
<dl>
<dt>Release()</dt>
<dd>Called from Connection.Close(). If the Pooled property is false, the pyhsical connection is closed and the connector object then subject to the garbage collection. If the Pooled property is true, the physical connection is held open and the connector object is inserted into the pool manager's pooled connections list, in order to subsequently get recycled. </dd>
</dl>


<h3>Events</h3>
<p>There are currently no events.</p>


<h2>Concecpts</h2>


<p></p>

<h3>Life Cylcle of a Connector Object</h3>

<p>The life cycle of a connector object is illustrated in figure-1.</p>

<img src="connection-pooling-3.png">

<p>If a client (typically a connection object) wants to obtain a connector object, it does so by calling the RequestConnector() method of the connector pool manager. </p>

<p>If the requested connector is allowed to be shared, the shared connections are being searched first. If a nonshared connection is requested or an appropriate shared connection could not be found, then the pooled connectors list is searched. If that fails, too,  a new connector object is created, intialized and the physical connection is opened according to the connection string.</p>

<p>Comparison criterium for the search is the matching of the the connection strings.</p>

<p>Finally the connector object is returned to the caller (connection object), which then can operate on the database by means of the connector object's methods and properties.</p>

<p>If the connector object isn't needed anymore, it should be released to the pool manager as early as possible by calling it's Release() method. The connector is added  then to the pooled connectors list. </p>

<p>Shared connectors are treated a little bit different: As there may be other clients (connection objects), a share counter is decremented instead. A value above 0 indicates other clients working with that connector, and everything is left as is. On the contrary, a value of 0 indicates that the connector is not in use anymore, so that it is removed from the shared connectors list and moved to the pooled connectors list. </p>

<p>In both cases the pyhsical connection is left open in order to get it recycled quickly by a matching following request.</p>

<p>In cases where the connection must be destroyed immediately after use, the client may clear the connector.Pooled property before calling Connector.Release(). Then the physical connection is closed immediately.  Because this connector is of no use for pooling then, it is <b>not</b> added to the connector pool manager's pooled connectors list but handed over to the garbage collector instead.</p>

<p><b>Note</b> Clearing the Pooled property of a shared connection has no effect (to be precice: it is rejected): As there might be a lot of connection objects spread over the whole application working with a single shared connection, it might be difficult to determine which Release() call will have the physical connection closed. In order not to introduce trouble in application programming, the described behaviour is choosen for shared connections.</p>

<p><b>Note</b> Be careful using database transactions in conjunction with shared connectors: As transactions are coordinated on a connection basis, this might lead to unexpected, although correct behaviour. As a rule of thumb, the transaction should then be controlled from a single part of the application. (<b>???</b> to be confirmed)</p>

<h3>The Code</h3>

<p>Have a look <a href="javascript:popUp('../src/npgsql/NpgsqlConnector.cs')">here</a></p>




</body>
</html>
